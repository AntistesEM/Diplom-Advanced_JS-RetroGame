export default class Node {
  constructor(index, parent = null, g = 0, h = 0) {
      this.index = index; // индекс текущей клетки
      this.parent = parent; // родительская клетка
      this.g = g; // стоимость пути от начальной клетки до текущей
      this.h = h; // оценка расстояния от текущей клетки до конечной
      this.f = g + h; // f = g + h, общая оценка стоимости пути
  }
}

// Алгоритм A* (A-star) является одним из наиболее популярных алгоритмов поиска пути. Он используется для нахождения кратчайшего пути от начальной точки к целевой точке на графе или сетке.

// Есть одномерная сетка размером 8 на 8, где каждая клетка имеет уникальный индекс от 0 до 63. Позиция персонажей на сетке соответствует индексу клетки.

// Как работает алгоритм A*:

// 1. Начальная настройка
//    - Создается пустой открытый список, который содержит клетки для исследования.
//    - Создается пустой закрытый список, который содержит клетки, которые уже были исследованы.
//    - Начальная клетка добавляется в открытый список.

// 2. Цикл
//    - Пока открытый список не пуст:
//      - Выберите клетку с наименьшим общим стоимостным показателем (F) и назовите ее текущей клеткой.
//      - Переместите текущую клетку из открытого списка в закрытый список.

//      - Если текущая клетка является целевой клеткой, алгоритм завершается, и путь найден.
//      - Получите всех соседей текущей клетки.
//      - Для каждого соседа:
//        - Если сосед уже находится в закрытом списке, проигнорируйте его и перейдите к следующему соседу.
//        - Если сосед не находится в открытом списке, добавьте его туда.
//        - Поставьте текущую клетку как родительскую для этого соседа.
//        - Вычислите значения G, H и F для соседа.
//          - G - стоимость пути от начальной клетки до текущей соседней клетки.
//          - H - эвристическая оценка стоимости пути от соседней клетки до целевой клетки (например, расстояние по прямой).
//          - F = G + H - общая стоимость пути для соседа.
//        - Если сосед уже находится в открытом списке, но его текущая стоимость F выше новой стоимости F, замените его текущие значения на новые.

//    - Если открытый список пуст и целевая клетка не была найдена, путь не существует.

// 3. Построение пути
//    - Начните с целевой клетки и перемещайтесь от соседа к родителю, пока не достигнете начальной клетки. Записывайте каждую клетку на пути.
//    - В конечном итоге вы получите кратчайший путь от начальной клетки до целевой клетки на вашей сетке.
